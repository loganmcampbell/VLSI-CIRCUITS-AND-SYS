
  // for (int x = 0; x < linecount(filename) - 1;  x++)
  // {
  //   cout << "x : " << x << " -> " << array[x] << endl;
  // }

  // INDICAtOR OF MOVES
  // for (int x = 0; x < linecount(filename) - 1; x++)
  // {
  //   string line;
  //   line = array[x];
  //   char indicator = line[0];
  //   if (indicator == '-')
  //   {
  //     cout << "MOVE 1 or MOVE 2" << endl;
  //   }
  //   else
  //   {
  //     cout << "MOVE 3 " << endl;
  //   }
  //
  // }

//  REMEMEBR!!!
// ? Move 1 (Operand swap): Swap two adjacent operands.
// ? Move 2 (Chain invert): Complement a chain (V?H, H?V)
// ? Move 3 (Operator/operand swap): Swap two adjacent operand and
// operator.
// --------------------------------------------------------------------

//* VALIDATION:
// READ STRING:


  // FORWARD
  // for (int x = 0; x < array[0].size(); x++)
  // {
  //   cout << "character : " << array[0][x] << endl;
  // }


  // RUN THROUGH ARRAY TO ENABLE OPERATION ON EACH EXPRESSION.
  // WOULDN'T LET US CAPTURE EACH LINE WITHOUT RUNNING THROUGH THE ARRAY FIRST.
  // [STRANGE]
  // for (int x = 0; x < linecount(filename) - 1; x++)
  // {
  //   array[x];
  // }
  //BACK
  for (int x = array[0].size(); x >= 0; x--)
  {
    if (array[0][x] == ' ' || array[0][x] == '\n' || array[0][x] == '\0')
    {
    }
    else
    {
      test += array[0][x];
    }
  }

  cout << "TEST : " << test << endl;

  // H H OR VV at the START OF THE GRAPH
  if (test[test.size()-2] == test[test.size()-4])
  {
    cout << "INVALID EXPRESSION [CONSECUTIVE OPERATORS]" << endl;
    for (int x = 0; x < test.size(); x++)
    {
      if (x == test.size() - 4 || x == test.size() - 2)
      {
        cout << "[" << test[x] << "]";
      }
      else
        cout << test[x];
    }
  }
